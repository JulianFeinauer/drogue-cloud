name: CI

on:
  push:
    # Must only run on branches that we want to publish
    branches:
      - main
    # Releases are tags named 'v<version>', and must have the "major.minor.micro", for example: "0.1.0".
    # Release candidates are tagged as `v<version>-rc<num>`, for example: "0.1.0-rc1".
    tags:
      - "v*"
  # Can run on PRs, as we don't publish when building a PR
  pull_request:

jobs:
  build:
    runs-on: ubuntu-20.04

    env:
      CONTAINER_REGISTRY: ghcr.io/${{ github.repository_owner }}

    steps:

      # Gather information for build

      - name: Evaluate state
        id: state
        run: |
          test -z "${{github.head_ref}}" && echo '::set-output name=do-publish::true'
          if [[ ${{ github.event.ref }} =~ ^refs/tags/v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo ::set-output name=release::true
              echo ::set-output name=release::true
          elif [[ ${{ github.event.ref }} =~ ^refs/tags/v.*$ ]]; then
              echo ::set-output name=release::true
              echo ::set-output name=prerelease::true
          fi

      - name: Set version
        if: ${{github.head_ref == ''}}
        id: version
        run: |
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          [ "$VERSION" == "main" ] && VERSION=latest
          echo VERSION=$VERSION
          echo '::set-output name=version::$VERSION'
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Dump state
        run: |
          echo "Tag/version: ${VERSION} / ${{steps.version.outputs.version}}"
          echo "Should we publish artifacts? - do-publish = ${{steps.state.outputs.do-publish}}"
          echo "Release? - release = ${{steps.state.outputs.release}}"
          echo "Pre-release? - prerelease = ${{steps.state.outputs.prerelease}}"

      # Start the actual build

      - uses: actions/checkout@v2

      - uses: actions/cache@v2
        with:
          path: |
            .cargo-container-home/registry
            .cargo-container-home/git
            target
          key: ${{ runner.os }}-cargo-container-${{ hashFiles('**/Cargo.lock') }}

      - uses: actions/cache@v2
        with:
          path: console-frontend/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('console-frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Create installer archives
        if: ${{steps.state.outputs.do-publish}}
        run: |
          make -C installer VERSION=$VERSION

      - uses: actions/upload-artifact@v2
        if: ${{steps.state.outputs.do-publish}}
        with:
          name: installers
          path: installer/build/install-*.zip
          if-no-files-found: error

      - name: Run build
        run: |
          make build

      - name: Run tests
        run: |
          make test

      - name: Login to github container repository
        if: ${{steps.state.outputs.do-publish}}
        run: echo "${{ secrets.GHCR_PAT }}" | docker login https://ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build, tag, and push images
        if: ${{steps.state.outputs.do-publish}}
        run: |
          make images "IMAGE_TAG=$VERSION"

      - name: Fix permissions
        run: |
          make fix-permissions

      - name: Create Release
        id: create_release
        if: ${{ steps.state.outputs.release }}
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.version }}
          release_name: ${{ steps.version.outputs.version }}
          draft: false
          prerelease: ${{ steps.state.outputs.prelease }}

  check:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
          profile: minimal
          override: true

      - name: Install dependencies
        run: |
          sudo apt-get -y install libsasl2-dev libpq-dev

      - name: Run cargo fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

      - name: Clippy check
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features

      - name: Check
        uses: actions-rs/cargo@v1
        with:
          command: check
